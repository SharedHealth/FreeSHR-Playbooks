#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    tune.ssl.default-dh-param 2048

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend http-in
        bind :80
        reqadd X-Forwarded-Proto:\ http

        {% if is_ssl_enabled is defined and is_ssl_enabled != false %}acl network_allowed src {% for host in groups['shr'] %} {{host}} {% endfor %} {% for host in groups['mci'] %} {{host}} {% endfor %} {% for host in groups['tr-server'] %} {{host}} {% endfor %} {% for host in groups['patient-journal'] %} {{host}} {% endfor %} {% for host in groups['datasense'] %} {{host}} {% endfor %} {% for host in groups['bahmni-app-active'] %}{% if hostvars[host].use_http is defined and hostvars[host].use_http != false %} {{host}} {% endif %}{% endfor %} {% for host in groups['bahmni-app-passive'] %}{% if hostvars[host].use_http is defined and hostvars[host].use_http != false %} {{host}} {% endif %}{% endfor %}{% endif %}

        # Define hosts
        acl host_shr hdr(host) -i {{ shr_host_name }}
        acl host_shr_dstu2_service path_beg /v1
        acl host_shr_stu3_service path_beg /v2
        acl host_tr_service hdr(host) -i {{ tr_host_name }}
        acl host_pj_service hdr(host) -i {{ pj_host_name }}
        acl host_mci_admin hdr(host) -i {{ mci_admin_host_name }}
        acl host_mci hdr(host) -i {{ mci_host_name }}
        acl host_mci_service_default path_beg /api/default
        acl host_mci_service path_beg /api/v1
        acl host_mci_fhir path_beg /api/v2
        acl host_healthId_service path_beg /healthIds
        acl host_datasense hdr(host) -i {{ datasense_host_name }}
        {% if is_ssl_enabled is defined and is_ssl_enabled != false %} redirect scheme https code 302 if !network_allowed {% endif %}

        ## figure out which one to use
        use_backend shr-dstu2-service-cluster if host_shr host_shr_dstu2_service
        use_backend shr-stu3-service-cluster if host_shr host_shr_stu3_service
        default_backend shr-stu3-service-cluster if host_shr
        use_backend mci-service-cluster if host_mci host_mci_service or host_mci_service_default
        use_backend mci-fhir-cluster if host_mci host_mci_fhir
        use_backend healthId-service-cluster if host_mci host_healthId_service
        use_backend mci-admin-node if host_mci_admin
        use_backend tr-server-node if host_tr_service
        use_backend pjournal-node if host_pj_service
        use_backend datasense-node if host_datasense

{% if is_ssl_enabled is defined and is_ssl_enabled != false %}
frontend https-in
        bind :443 ssl crt {{ pem_file_path }}
        reqadd X-Forwarded-Proto:\ https

        # Define hosts
        acl host_shr hdr(host) -i {{ shr_host_name }}
        acl host_shr_dstu2_service path_beg /v1
        acl host_shr_stu3_service path_beg /v2
        acl host_mci_admin   hdr(host) -i {{ mci_admin_host_name }}
        acl host_tr_service  hdr(host) -i {{ tr_host_name }}
        acl host_pj_service  hdr(host) -i {{ pj_host_name }}
        acl host_mci hdr(host) -i {{ mci_host_name }}
        acl host_mci_service_default path_beg /api/default
        acl host_mci_service path_beg /api/v1
        acl host_mci_fhir path_beg /api/v2
        acl host_healthId_service path_beg /healthIds
        acl host_datasense hdr(host) -i {{ datasense_host_name }}


        ## figure out which one to use
        use_backend shr-dstu2-service-cluster if host_shr host_shr_dstu2_service
        use_backend shr-stu3-service-cluster if host_shr host_shr_stu3_service
        default_backend shr-stu3-service-cluster if host_shr
        use_backend mci-service-cluster if host_mci host_mci_service or host_mci_service_default
        use_backend mci-fhir-cluster if host_mci host_mci_fhir
        use_backend healthId-service-cluster if host_mci host_healthId_service
        use_backend mci-admin-node if host_mci_admin
        use_backend tr-server-node if host_tr_service
        use_backend pjournal-node if host_pj_service
        use_backend datasense-node if host_datasense
{% endif %}

#---------------------------------------------------------------------
# round robin balancing between the SHR Service backends
#---------------------------------------------------------------------
backend shr-dstu2-service-cluster
    errorfile 503 /etc/haproxy/error_files/shr-deprecated.http

backend shr-stu3-service-cluster
    balance     roundrobin
    {% for host in groups['shr-server'] %}
    server shr{{ loop.index }} {{host}}:{{ hostvars[host]['shr_port'] }} check
    {% endfor %}


#---------------------------------------------------------------------
# round robin balancing between the MCI Service backends
#---------------------------------------------------------------------
backend mci-service-cluster
    balance     roundrobin
    {% for host in groups['mci-server'] %}
    server mci{{ loop.index }} {{host}}:{{ hostvars[host]['mci_port'] }} check
    {% endfor %}

#---------------------------------------------------------------------
# round robin balancing between the MCI fhir backends
#---------------------------------------------------------------------
backend mci-fhir-cluster
    balance     roundrobin
    {% for host in groups['mci-fhir'] %}
    server mci-fhir{{ loop.index }} {{host}}:{{ hostvars[host]['mci_fhir_port'] }} check
    {% endfor %}

#---------------------------------------------------------------------
# round robin balancing between the HealthId server backends
#---------------------------------------------------------------------
backend healthId-service-cluster
    balance     roundrobin
    {% for host in groups['healthid-server'] %}
    server healthId-service{{ loop.index }} {{host}}:{{ hostvars[host]['healthId_port'] }} check
    {% endfor %}

#---------------------------------------------------------------------
# source between the MCI Admin backends
#---------------------------------------------------------------------
backend mci-admin-node
    balance     source
    {% for host in groups['mci-ui'] %}
    server mciadmin{{ loop.index }} {{host}}:80 check
    {% endfor %}

#---------------------------------------------------------------------
# round robin balancing between the TR backends
#---------------------------------------------------------------------
backend tr-server-node
    balance     roundrobin
    {% for host in groups['tr-server'] %}
    server tr{{ loop.index }}  {{host}}:{{ hostvars[host]['tr_server_port'] }} check
    {% endfor %}

#---------------------------------------------------------------------
# source between the Patient Journal backends
#---------------------------------------------------------------------
backend pjournal-node
    balance     source
    {% for host in groups['patient-journal'] %}
    server pj{{ loop.index }}  {{host}}:{{ hostvars[host]['patient_journal_port'] }} check
    {% endfor %}

#---------------------------------------------------------------------
# source between the Datasense backends
#---------------------------------------------------------------------
backend datasense-node
    balance     source
    {% for host in groups['datasense'] %}
    server datasense{{ loop.index }}  {{host}}:{{ hostvars[host]['datasense_port'] }} check
    {% endfor %}
