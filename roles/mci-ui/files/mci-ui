#!/bin/sh
#
# mci-ui        This shell script takes care of starting and stopping
#              the mci-ui system
#
# description: The mci-ui shared health record system
# processname: mci-ui
# pidfile: /var/run/mci-ui/mci-ui.pid
### BEGIN INIT INFO
# Provides: mci-ui
# Short-Description: start and stop mci-ui system,
# Description: mci-ui system
### END INIT INFO

. /etc/rc.d/init.d/functions

NAME="mci-ui"
pid_file="/var/run/$NAME/$NAME.pid"
log_file="/var/log/$NAME/$NAME.log"

exec="app/console"
APP_PORT="80"
APP_ENV="prod"
SYMFONY_DIR="/vagrant"

CUR_USER=`/usr/bin/whoami`
SERVER_ID="0.0.0.0:$APP_PORT"
SYMFONY_SERVER_ARGUMENTS="server:run $SERVER_ID --env=$APP_ENV"

if [ ! -e "/var/run/$NAME" ]; then
    mkdir "/var/run/$NAME"
fi

show_message() {
    echo $1
}

check_proc() {
    /usr/bin/pgrep -u $CUR_USER -f "\-S $SERVER_ID" >/dev/null
}

case "$1" in
    start)
        [ -d "$SYMFONY_DIR" ] || exit 7
        cd "$SYMFONY_DIR"
        [ -x "$exec" ] || exit 5


        if [ "${CUR_USER}" != "root" ] ; then
          show_message "MCI Server can only be started as 'root'."
          exit 4
        fi

        check_proc
        if [ $? -eq 0 ]; then
            echo "$?"
            log_success_msg "MCI-ui Server already running on port $APP_PORT"
            exit 0
        fi

        # MCI startup
        echo -n $"Starting $NAME :"
        nohup $exec $SYMFONY_SERVER_ARGUMENTS > $log_file &
        echo $! > $pid_file
        echo "OK"
        ;;
    stop)
        # MCI shutdown
        #Instead of dependending on pid file search for running process
        PID=`/usr/bin/pgrep -u $CUR_USER -f "\-S $SERVER_ID"`

        if [[ -z "$PID" ]]; then
            show_message "MCI-ui Server is not running"
            echo "" > $pid_file
            exit 0
        fi

        echo -n "Shutdown MCI-ui: "
        su $CUR_USER -c "kill $PID"
        echo "OK"
        echo "" > $pid_file
        ;;
    reload|restart)
        $0 stop
        $0 start
        ;;
    status)
        status -p $pid_file $NAME
        exit $?
        ;;
    *)
        echo "Usage: `basename $0` start|stop|status|restart|reload"
        exit 1
esac
exit 0
